plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
    id "maven-publish"
}

group = "com.boydti.fawe"
description = "FastAsyncWorldEdit"
version= "25.08.09-0-0-0.0.1"

tasks.register("setupCIWorkspace") { /* stub */ }
tasks.named("clean") { doLast { delete("target") } }

allprojects {
    configurations.all {
        resolutionStrategy {
            force 'org.ow2.asm:asm:6.0_BETA'
        }
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "eclipse"
    apply plugin: "idea"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.release = 17
        options.compilerArgs += ["-parameters"]
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }

        maven { url "https://repo.dmulloy2.net/content/groups/public/" }
        maven { url "https://repo.destroystokyo.com/repository/maven-public/" }
        mavenLocal()
        maven { url "https://hub.spigotmc.org/nexus/content/groups/public/" }
        maven { url "https://maven.enginehub.org/repo/" }
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url "https://repo.spongepowered.org/maven" }
        maven { url "https://repo.inventivetalent.org/content/groups/public/" }
        maven { url "https://maven.elmakers.com/repository/" }
        maven { url "https://ci.ender.zone/plugin/repository/everything/" }
        maven { url "https://plotsquared.com/mvn/" }

    }
}

tasks.register("aggregatedJavadocs", Javadoc) {
    description = "Generate javadocs from all child projects as if it was a single project"
    group = "Documentation"

    destinationDirectory = file("./docs/javadoc")
    title = "$project.name $version API"

    options.author = true
    options.links("https://docs.oracle.com/javase/8/docs/api/")
    options.addStringOption('Xdoclint:none', '-quiet')

    doFirst { delete("./docs") }

    subprojects.each { proj ->
        proj.tasks.withType(Javadoc).configureEach { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}
